version: '3.8'

services:
  # Base de données PostgreSQL (optionnel si vous utilisez une DB externe)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: p10-postgres
  #   environment:
  #     POSTGRES_DB: p10-audit
  #     POSTGRES_USER: p10-audit_owner
  #     POSTGRES_PASSWORD: your_password_here
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - p10-network

  # Application Backend P10 - Configuration DEV
  backend:
    build: 
      context: ./back
      dockerfile: Dockerfile
    container_name: p10-backend
    ports:
      - "4500:4500"
      - "9464:9464"  # Port pour les métriques OpenTelemetry
    environment:
      - NODE_ENV=development
      - PORT=4500
      - DATABASE_URL=${DATABASE_URL}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_SIGNING_KEY=${CLERK_SIGNING_KEY}
      - CORS_FRONTEND_URL=${CORS_FRONTEND_URL}
      - LOG_LEVEL=debug
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - prometheus
      - jaeger
      - redis
    networks:
      - p10-network
    volumes:
      - ./back/logs:/app/logs
      - ./back/src:/app/src  # Hot reload pour le développement
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4500/metrics/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js (optionnel)
  # frontend:
  #   build:
  #     context: ./front
  #     dockerfile: Dockerfile
  #   container_name: p10-frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - NEXT_PUBLIC_API_URL=http://localhost:4500
  #   depends_on:
  #     - backend
  #   networks:
  #     - p10-network
  #   restart: unless-stopped

  # Prometheus - Collecte des métriques (DEV)
  prometheus:
    image: prom/prometheus:latest
    container_name: p10-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus-dev.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - p10-network
    restart: unless-stopped

  # Grafana - Visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: p10-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - p10-network
    restart: unless-stopped

  # Jaeger - Tracing distribué
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: p10-jaeger
    ports:
      - "16686:16686"  # Interface web Jaeger
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # UDP agent
      - "6832:6832/udp"  # UDP agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - p10-network
    restart: unless-stopped

  # Node Exporter - Métriques système
  node-exporter:
    image: prom/node-exporter:latest
    container_name: p10-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - p10-network
    restart: unless-stopped

  # Redis (optionnel pour le cache)
  redis:
    image: redis:7-alpine
    container_name: p10-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - p10-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx - Reverse Proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: p10-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      # - frontend
      - backend
      - grafana
    networks:
      - p10-network
    restart: unless-stopped

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  # postgres_data:
  #   driver: local

networks:
  p10-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
